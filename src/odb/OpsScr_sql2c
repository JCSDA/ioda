#!/usr/bin/env bash
#-------------------------------------------------------------------------------
# NAME
#     OpsScr_sql2c
#
# SYNOPSIS
#     OpsScr_sql2c
#
# DESCRIPTION
#     This script generates C code from ODB .sql files.  It must be run from the
#     directory in which the .sql files reside.
#
# BUGS AND LIMITATIONS
#     This script is not particularly generic, it is anticipated that it will
#     require updating as new SQL or ODB table modifications are made.  See
#     comments below for more details.
#
# COPYRIGHT
#     (C) Crown copyright Met Office. All rights reserved.
#     For further details please refer to the file COPYRIGHT.txt
#     which you should have received as part of this distribution.
# -----------------------------------------------------------------------------

################################################################################
# 0. SQL queries are bound to particular databases.  See variable DB_LIST for a
#    list of databases dealt with by this script.  The variables below define
#    which queries are to be compiled against which database.
#
#    All new queries should be bound to the appropriate database by adding them
#    to the relevant variable.  It is possible to bind a query to more than one
#    database.
################################################################################

set -e
set -x

OOPS_queries=$(echo *.sql)

DB_LIST="OOPS"

################################################################################
# 0. In case .sql files or tables have been removed delete existing .c files
#    first.
################################################################################

rm -f *.c

echo "OpsScr_sql2c: Using $(type -p odb98.x)"

for DB in $DB_LIST
do

  ################################################################################
  # 2. Compile the .ddl files.
  ################################################################################

  odb98.x -V -O3 -l$DB -s -S -C $DB.ddl

  ################################################################################
  # 3. Compile the .sql files.
  ################################################################################

  query_list=$(eval echo \$${DB}_queries)

  if [[ -n $query_list ]]; then
    odb98.x -V -O3 -l$DB -w -s -S -C $query_list
  fi
done

################################################################################
# 4. Create the odb_glue file.
################################################################################

ODB_CC="" create_odbglue $DB_LIST

################################################################################
# 5. Remove unneeded intermediate files.
################################################################################

rm *.ddl_

################################################################################
# 6. Post-process the C code to remove redundant changes.  Basically, the
#    combined text of the SQL queries is pasted into each C file as a static
#    array of C strings.  Apart from taking up unnecessary memory it also means
#    that any change to a single SQL file results in meaningless modification of
#    all C files.  The commands below remove this array and replace it with a
#    NULL pointer; this is okay as the code that uses the array of strings
#    checks for a null pointer (it is only used for diagnostics).
#
#    The files are also missing stdlib.h includes; this is added.
################################################################################

for file in *.c
do
  mv $file $file.tmp
  echo '#include <stdlib.h>' > $file
  echo 'static const char **Sql = NULL;' >> $file
  sed -n '/^static const char \*Sql\[\] = {/,/^};/ !p' $file.tmp >> $file
  rm $file.tmp
done

exit 0
