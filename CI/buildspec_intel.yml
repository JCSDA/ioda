version: 0.2

env:
  shell: bash
  parameter-store:
    GIT_USER: "/CodeBuild/Git_USER"
    GIT_PASS: "/CodeBuild/Git_PASS"

phases:
  install:
    commands:
      - echo Executing install phase
      - echo $CODEBUILD_RESOLVED_SOURCE_VERSION
      - echo $CODEBUILD_SOURCE_REPO_URL
      - echo $CODEBUILD_SOURCE_VERSION

      - echo $CODEBUILD_WEBHOOK_MERGE_COMMIT
      - echo $CODEBUILD_WEBHOOK_PREV_COMMIT
      - echo $CODEBUILD_WEBHOOK_HEAD_REF
      - echo $CODEBUILD_WEBHOOK_ACTOR_ACCOUNT_ID
      - echo $CODEBUILD_WEBHOOK_EVENT
      - echo $CODEBUILD_WEBHOOK_TRIGGER
      - echo $CODEBUILD_WEBHOOK_BASE_REF
 
  pre_build:
    commands:
      - echo Executing pre_build phase

      - if [ "$CODEBUILD_WEBHOOK_EVENT" = "PUSH" ];
        then export CODEBUILD_GIT_BRANCH="develop";
        echo "Merging to develop";
        else export CODEBUILD_GIT_BRANCH=${CODEBUILD_WEBHOOK_HEAD_REF#refs/heads/};
        fi

      - echo "CODEBUILD_GIT_BRANCH=${CODEBUILD_GIT_BRANCH}"
      - echo "CODEBUILD_SOURCE_VERSION=${CODEBUILD_SOURCE_VERSION}"

      - if [ "$CODEBUILD_GIT_BRANCH" = "develop" ];
        then export CODEBUILD_GIT_BRANCH_FORK="release-stable";
        else export CODEBUILD_GIT_BRANCH_FORK=${CODEBUILD_GIT_BRANCH};
        echo "CODEBUILD_GIT_BRANCH_FORK=${CODEBUILD_GIT_BRANCH_FORK}";
        fi
   
      - cd CI
      - . /etc/profile.d/intel.sh

      # ioda
      - ./clone.sh $GIT_USER $GIT_PASS jcsda-internal/ioda $CODEBUILD_GIT_BRANCH ioda /jcsda/ioda-bundle develop

      # oops
      - ./clone.sh $GIT_USER $GIT_PASS jcsda-internal/oops $CODEBUILD_GIT_BRANCH oops /jcsda/ioda-bundle develop


      # internal repos
      #fckit
      - ./clone.sh $GIT_USER $GIT_PASS jcsda-internal/fckit $CODEBUILD_GIT_BRANCH_FORK fckit /jcsda/ioda-bundle release-stable

      # atlas
      - ./clone.sh $GIT_USER $GIT_PASS jcsda-internal/atlas $CODEBUILD_GIT_BRANCH_FORK atlas /jcsda/ioda-bundle release-stable

      - cp CMakeLists.txt /jcsda/ioda-bundle
      - cp -r cmake /jcsda/ioda-bundle/
      - chmod 777 -R /jcsda/ioda-bundle

      - cd /jcsda/ioda-bundle
      - ls

  build:
    commands:
      - echo Executing build phase


      - su - jedi -c "export CC=mpiicc
        && export FC=mpiifort
        && export CXX=mpiicpc
        && export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
        && export PATH=/usr/local/lib:$PATH
        && export PYTHONPATH=/usr/local/lib:/usr/local/lib/python3.8/site-packages:$PYTHONPATH
        && cd /home/jedi
        && ecbuild -DBUILD_PYTHON_BINDINGS=ON /jcsda/ioda-bundle/
        && cd /home/jedi/ioda
        && make -j4"

      - export BUILD_STATUS="0"
      - echo $BUILD_STATUS
      - echo $CODEBUILD_BUILD_SUCCEEDING

      - if [ "$CODEBUILD_BUILD_SUCCEEDING" = "1" ];
        then export BUILD_STATUS="1";
        echo "Build passed";
        fi
      - echo $BUILD_STATUS

      - su - jedi -c "export CC=mpiicc
        && export FC=mpiifort
        && export CXX=mpiicpc
        && export LD_LIBRARY_PATH=/usr/local/lib:/home/jedi/lib:$LD_LIBRARY_PATH
        && export PATH=/usr/local/lib:$PATH
        && cd /home/jedi/ioda
        && ctest"

  post_build:
    commands:
      - echo Executing post_build phase
      - echo $CODEBUILD_BUILD_SUCCEEDING

      - if [ "$BUILD_STATUS" = "1" ] && [ "$CODEBUILD_BUILD_SUCCEEDING" = "0" ];
        then echo "Build passed, rerun failed tests";
        su - jedi -c "export CC=mpiicc
        && export FC=mpiifort
        && export CXX=mpiicpc
        && export LD_LIBRARY_PATH=/usr/local/lib:/home/jedi/lib:$LD_LIBRARY_PATH
        && export PATH=/usr/local/lib:$PATH
        && cd /home/jedi/ioda
        && ctest -VV --rerun-failed";
        else echo "Build failed";
        fi
